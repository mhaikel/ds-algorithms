package com.mhaikel.partonesolutions;

public class DigitsAddition1 {
    public static void main(String[] args) {
        System.out.println("Sum ::: " + addDigitsOptimized(38));
    }

    /**
     * the simpler solution, is to use recursion/loop, each time, add all digits number, until generates a single digit number.
     * @param num
     * @return
     */
    static int addDigitsTillSingle(int num) {
        while (num > 9) {
            int result = 0;
            while (num > 0) {
                result = result + num%10;
                num = num/10;
            }

            num = result;
        }

        return num;
    }

    /**
     * There a a constant solution, the result set can only be in [0...9],
     * 0 can only be generated by 0, so the result set of all positive number is [1...9],
     * each time the number increase by 10, the number that adds up to 9 shift left by 1, say res(18) = 9, res(27) = 9, ...
     * so this question becomes : how many numbers are there between this number and the last res(X) = 9;
     *
     * so the question becomes X = 9 * ((num-1)/9) and the final result is num - X;
     * @param num
     * @return
     */
    static int addDigitsOptimized(int num){
        return num - 9 * ((num-1)/9);
    }
}
